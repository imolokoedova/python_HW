

def readall(nm):                                                            # читает текстовый файл и выводит его на печать построчно
    with open(nm, 'r', encoding='utf8') as txt_file: # открываем список в режиме только чтение как txt_file
        for line in txt_file: # цикл проходит по каждой строчке нашего списка
            print(line.strip()) # выводит построчно список без пробелов
            
def write_1(nm):                                            # добавляет и сохраняет новый контакт                                                  
    str_new1 = input('Фамилия: ') # поочередно запрашиваем данные контакта чтобы избежать ошибок на вводе (разделитель запятая)
    str_new2 = input('Имя: ')
    str_new3 = input('Отчество: ')
    str_new4 = input('Телефон: ')
    str_new = '\n' + str_new1 + ',' + str_new2 + ',' + str_new3 + ',' + str_new4 # генерим строку из полученных данных, которая запишется в справочник
    with open(nm, 'a', encoding='utf8') as txt_file: # открываем файл в режиме добавления
        txt_file.write(str_new) # записываем
        
def find_item(nm):                                          # находит элемент списка по характеристике (это мб буква часть слова) 
    item = input('Характеристика: ') # вводим переменную по которой будем искать
    with open(nm, 'r', encoding='utf8') as txt_file: # открываем файл в режиме чтения
        for line in txt_file: # пробегаемся по каждой строке в файле
            if item.lower() in line.lower(): # если элемент встречается в строке (.lower понижаем регистр всех слов)
                print(line.strip()) # то выводим в консоль эту строку (.strip убирает в конце \n)
                
def find_item_2(nm):                                        # поиск с уточнением характеристики (каждая строка делаеся списком и введенное == элемент списка)                                           
    item = input('Что ищем? ')
    item_type = int(input('Введите номер поиска, где 0 - фамилия, 1 - имя, 2 - отчество, 3 - номер телефона: '))
    with open(nm, 'r', encoding='utf8') as txt_file: # открыли файл в режиме чтения
        for line in txt_file:
            line = line.split(', ') # разбиваем строку на элементы чтобы превратить в массив, запятую пишем в скобках (потому что запятые тоже нужно убрать или потому что делим по пробелу с запятой (?))
            if item.lower() in line[item_type].lower(): 
                print(*line) # * чтобы выводилась вся строка (?) писали сначала .strip не работало


def sort_data(nm):                                          # сортировка по определенному столбцу (прочитать в массив, в массиве отсортировать и открыть в режиме записи w и записать такой же новый файл)
    list_1 = [] # создаем новый список куда будем кидать все строки (почему в этом методе нужен новый список?)
    item_type = int(input('Введите номер поиска, где 0 - фамилия, 1 - имя, 2 - отчество, 3 - номер телефона: ')) # вводим параметр по которому сортируем    
    with open(nm, 'r', encoding='utf8') as txt_file: # открываем на чтение
        for line in txt_file: # проходим по всем строкам файла
            line = line.split(', ') # разбиваем строку на элементы (получаем список списков(?)) (line - сейчас список который состоит из 4 элементов)
            list_1.append(line) # сложили строки в новый список (.append добавить к списку эл-т) (append создание списка списков(??)) (здесь добавляем список из 4 элементов)
        list_1.sort(key=lambda person: person[item_type])  # сортируем (.sort сортирует по первой букве элемента, у нас каждая строка -- 1 элемент) (list_1 здесь список списков) (чтобы отсортировать нужно использоавть lambda которая будет попадать в каждый маленький список: key указывает что сдлать с элемментом person могло быть line или любым др названием) person не вводим, почему не вводим аргумент lambda функций?
    with open(nm, 'w', encoding= 'utf8') as txt_file: # перезаписываем весь файл 
        for line in list_1: # (у нас есть список который называется list_1, считываем строки из list_1)
            line = ', '.join(line) # собрали элементы обратно в троки
            txt_file.write(line) # перезапись    
            
            
# Дополнить телефонный справочник возможностью изменения и удаления данных. 
# Пользователь также может ввести имя или фамилию, и Вы должны реализовать функционал для изменения и удаления данных

def change_data(nm):
    
    
def delete_data(nm): 
            

# write_1(data.txt)
readall('data.txt')
# find_item(data.txt)
# find_item_2(data.txt)
sort_data('data.txt')